/*pragma solidity ^0.5.11;

contract Crud {
struct User {
uint id;
string name;
}
User[] public users;
uint public nextId = 0;
function Create(string memory name) public {
users.push(User(nextId, name));
nextId++;
}
function Read(uint id) view public returns(uint, string memory) {
for(uint i=0; i<users.length; i++) {
if(users[i].id == id) {
return(users[i].id, users[i].name);
}
}
}
function Update(uint id, string memory name) public {
for(uint i=0; i<users.length; i++) {
if(users[i].id == id) {
users[i].name =name;
}
}
}
function Delete(uint id) public {
delete users[id];
}
function find(uint id) view internal returns(uint) {
for(uint i=0; i< users.length; i++) {
if(users[i].id == id) {
return i;
}
}
// if user does not exist then revert back
revert("User does not exist");
}
}
*/



// SPDX-License-Identifier: MIT
pragma solidity  ^0.5.11;
contract CRUD{

struct User{
    uint uid;
    string name;
}

 User[] public users;
 uint public nextid   =0;

 function Create(string memory name) public {

    users.push(User(nextid,name));
    nextid++;
 }

function Get_Name(uint  key) view public returns ( string memory name){
    if(key>=users.length) return "not present";
    return users[key].name;
}
function Update ( uint  id , string memory newname ) public {
    
    users[id].name = newname;
}

function Get_Next_Id() public view returns ( uint  id){
    return nextid;
}

function Delete(uint key) public{
    delete users[key];
}
/*
function find(uint memory key ) public  view {
   for(uint i =0 ; i <users.length ; i++){
    if( ) {
        revert(" Found ");
    }
   }
   revert("Not Found");
}*/
}